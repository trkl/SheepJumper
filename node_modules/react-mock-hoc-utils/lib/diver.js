"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.diveThroughMockHocs = exports.diveSingleToComponent = exports.diveStaticAmount = exports.diveThroughComponent = exports.diveThroughComponents = exports.MAX_DIVES = undefined;

var _enzyme = require("enzyme");

var _lodash = require("lodash");

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var MAX_DIVES = exports.MAX_DIVES = 50;

var invalidMessage = function invalidMessage(methodName, component, otherName, otherValue) {
  throw methodName + ": either the component (" + component + ") or the " + otherName + " (" + otherValue + ") is invalid";
};

var ProviderDiver_legacy = function ProviderDiver_legacy(diveTo) {
  return function (wrappedComponent) {
    return (0, _enzyme.shallow)(wrappedComponent).find(diveTo).dive();
  };
};

var ProviderDeepDiver_legacy = function ProviderDeepDiver_legacy(diveTo) {
  return function (wrappedComponent) {
    var component = (0, _enzyme.shallow)(wrappedComponent);
    _lodash2.default.forEach(diveTo, function (next) {
      component = component.find(next).dive();
    });

    return component;
  };
};

var diveThroughComponents = exports.diveThroughComponents = function diveThroughComponents(shallowComponent, diveTos) {
  if (!shallowComponent || !diveTos) throw invalidMessage("diveThroughComponents", shallowComponent, "diveTos", diveTos);

  var component = shallowComponent;
  _lodash2.default.forEach(diveTo, function (next) {
    component = component.find(next).dive();
  });

  return component;
};

var diveThroughComponent = exports.diveThroughComponent = function diveThroughComponent(shallowComponent, diveTo) {
  if (!shallowComponent || !diveTo) throw invalidMessage("diveThroughComponent", shallowComponent, "diveTo", diveTo);

  return shallowComponent.find(diveTo).dive();
};

var diveStaticAmount = exports.diveStaticAmount = function diveStaticAmount(shallowComponent, diveCount) {
  if (!shallowComponent || !_lodash2.default.isNumber(diveCount)) invalidMessage("diveStaticAmount", shallowComponent, "diveCount", diveCount);

  var comp = shallowComponent;
  for (var i = 0; i < diveCount; i++) {
    comp = comp.dive();
  }
  return comp;
};

var diveSingleToComponent = exports.diveSingleToComponent = function diveSingleToComponent(shallowComponent, diveTarget) {
  var comp = shallowComponent;

  if (!diveTarget || !shallowComponent) invalidMessage("diveSingleToComponent", shallowComponent, "diveTarget", diveTarget);

  for (var i = 0; i < MAX_DIVES && comp.name() != diveTarget; i++) {
    comp = comp.dive();
  }
  return comp.dive();
};

var diveThroughMockHocs = exports.diveThroughMockHocs = function diveThroughMockHocs(shallowComponent) {
  if (!shallowComponent) throw "diveThroughMocHoc: the component was invalid (" + shallowComponent + ")";

  var comp = shallowComponent;
  for (var i = 0; i < MAX_DIVES && comp.name() == ""; i++) {
    comp = comp.dive();
  }
  return comp.dive();
};