{"ast":null,"code":"import _createClass from \"/Users/torkildjurhuus/Code/SheepJumper/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _objectSpread from \"/Users/torkildjurhuus/Code/SheepJumper/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/torkildjurhuus/Code/SheepJumper/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport EventManager from \"../EventManager/EventManager\";\n\n// import { isRegExp } from \"util\";\n// data-structure for subscriber\nvar KeyboardSubscriber = function KeyboardSubscriber(object, key, event) {\n  _classCallCheck(this, KeyboardSubscriber);\n\n  this.key = void 0;\n  this.event = void 0;\n  this.key = key;\n  this.event = _objectSpread({}, event, {\n    gameObject: object\n  });\n}; // This class will tie keyboard inputs to their actions\n\n\nvar KeyboardObservable =\n/*#__PURE__*/\nfunction () {\n  function KeyboardObservable(eventManager) {\n    var _this = this;\n\n    _classCallCheck(this, KeyboardObservable);\n\n    this.subscribers = void 0;\n    this.whileDownSubscribers = void 0;\n\n    this.subscribe = function (object, key, event) {\n      var endOnKeyup = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      var subscriber = new KeyboardSubscriber(object, key, event);\n\n      _this.subscribers.push(subscriber);\n\n      if (endOnKeyup) _this.whileDownSubscribers.push(subscriber);\n    };\n\n    this.subscribeWhileDown = function (object, key, event) {\n      _this.subscribers.push(new KeyboardSubscriber(object, key, event));\n    };\n\n    this.unsubscribe = function (object) {\n      var length = _this.subscribers.length;\n      if (length) for (var i = 0; i < length; ++i) {\n        var subscriber = _this.subscribers[i];\n\n        if (subscriber.event.gameObject === object) {\n          _this.subscribers.splice(i, 1);\n        }\n      } else {\n        throw \"No subscribers\";\n      }\n    };\n\n    this.endEvent = function (event) {\n      _this.registerKeyUp(event.key);\n\n      if (!_this.whileDownSubscribers) return;\n\n      _this.whileDownSubscribers.forEach(function (gameObject) {\n        if (event.key === gameObject.key) {\n          EventManager.instance.registerEvent(_objectSpread({}, gameObject.event, {\n            end: true\n          }));\n        }\n      });\n    };\n\n    this.keysDown = [];\n\n    this.onNext = function (event) {\n      if (_this.isRepeatKey(event.key)) return;\n\n      _this.registerKeyDown(event.key);\n\n      if (!_this.subscribers.length) return;\n\n      _this.subscribers.forEach(function (gameObject) {\n        if (event.key === gameObject.key) {\n          EventManager.instance.registerEvent(gameObject.event);\n        } // this.eventManager.registerEvent(gameObject.event);\n\n      });\n    };\n\n    this.subscribers = [];\n    this.whileDownSubscribers = [];\n    document.addEventListener(\"keydown\", this.onNext, false);\n    document.addEventListener(\"keyup\", this.endEvent, false); // document.addEventListener(\"keyup\", this.endEvent, false);\n  } // \"key\" is the letter of the key on the keyboard to listen for\n\n\n  _createClass(KeyboardObservable, [{\n    key: \"registerKeyDown\",\n    value: function registerKeyDown(key) {\n      this.keysDown[key] = true;\n    }\n  }, {\n    key: \"registerKeyUp\",\n    value: function registerKeyUp(key) {\n      delete this.keysDown[key];\n    }\n  }, {\n    key: \"isRepeatKey\",\n    value: function isRepeatKey(key) {\n      return this.keysDown[key];\n    }\n  }]);\n\n  return KeyboardObservable;\n}();\n\nexport { KeyboardObservable as default };","map":{"version":3,"sources":["/Users/torkildjurhuus/Code/SheepJumper/src/InputManager/KeyboardObservable.tsx"],"names":["EventManager","KeyboardSubscriber","object","key","event","gameObject","KeyboardObservable","eventManager","subscribers","whileDownSubscribers","subscribe","endOnKeyup","subscriber","push","subscribeWhileDown","unsubscribe","length","i","splice","endEvent","registerKeyUp","forEach","instance","registerEvent","end","keysDown","onNext","isRepeatKey","registerKeyDown","document","addEventListener"],"mappings":"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","sourcesContent":["import Event from \"../Events/Event\";\nimport EventManager from \"../EventManager/EventManager\";\nimport PhysicsEngine from \"../PhysicsEngine/PhysicsEngine\";\nimport CollisionManger from \"../CollisionManager/CollisionManager\";\n// import { isRegExp } from \"util\";\n\n// data-structure for subscriber\nclass KeyboardSubscriber {\n  constructor(object: any, key: string, event: Event) {\n    this.key = key;\n    this.event = { ...event, gameObject: object };\n  }\n  key: string;\n  event: Event;\n}\n\n// This class will tie keyboard inputs to their actions\nexport default class KeyboardObservable {\n  private subscribers: KeyboardSubscriber[];\n  private whileDownSubscribers: KeyboardSubscriber[];\n\n  constructor(eventManager: EventManager) {\n    this.subscribers = [];\n    this.whileDownSubscribers = [];\n    document.addEventListener(\"keydown\", this.onNext, false);\n    document.addEventListener(\"keyup\", this.endEvent, false);\n    // document.addEventListener(\"keyup\", this.endEvent, false);\n  }\n\n  // \"key\" is the letter of the key on the keyboard to listen for\n  subscribe = (\n    object: any,\n    key: string,\n    event: Event,\n    endOnKeyup: boolean = false\n  ) => {\n    const subscriber = new KeyboardSubscriber(object, key, event);\n    this.subscribers.push(subscriber);\n    if (endOnKeyup) this.whileDownSubscribers.push(subscriber);\n  };\n\n  subscribeWhileDown = (object: any, key: string, event: Event) => {\n    this.subscribers.push(new KeyboardSubscriber(object, key, event));\n  };\n\n  unsubscribe = (object: any) => {\n    const { length } = this.subscribers;\n    if (length)\n      for (let i = 0; i < length; ++i) {\n        const subscriber = this.subscribers[i];\n        if (subscriber.event.gameObject === object) {\n          this.subscribers.splice(i, 1);\n        }\n      }\n    else {\n      throw \"No subscribers\";\n    }\n  };\n\n  // // supposed to be called after document is mounted\n  // init = () =>\n\n  endEvent = (event: KeyboardEvent) => {\n    this.registerKeyUp(event.key);\n    if (!this.whileDownSubscribers) return;\n    this.whileDownSubscribers.forEach(gameObject => {\n      if (event.key === gameObject.key) {\n        EventManager.instance.registerEvent({ ...gameObject.event, end: true });\n      }\n    });\n  };\n\n  keysDown: any = [];\n\n  registerKeyDown(key: string) {\n    this.keysDown[key] = true;\n  }\n  registerKeyUp(key: string) {\n    delete this.keysDown[key];\n  }\n\n  isRepeatKey(key: string) {\n    return this.keysDown[key];\n  }\n\n  onNext = (event: KeyboardEvent) => {\n    if (this.isRepeatKey(event.key)) return;\n    this.registerKeyDown(event.key);\n    if (!this.subscribers.length) return;\n    this.subscribers.forEach(gameObject => {\n      if (event.key === gameObject.key) {\n        EventManager.instance.registerEvent(gameObject.event);\n      }\n\n      // this.eventManager.registerEvent(gameObject.event);\n    });\n  };\n}\n"]},"metadata":{},"sourceType":"module"}