{"ast":null,"code":"import _regeneratorRuntime from \"/Users/torkildjurhuus/Code/SheepJumper/node_modules/@babel/runtime/regenerator\";\nimport _objectSpread from \"/Users/torkildjurhuus/Code/SheepJumper/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"/Users/torkildjurhuus/Code/SheepJumper/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"/Users/torkildjurhuus/Code/SheepJumper/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/torkildjurhuus/Code/SheepJumper/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/torkildjurhuus/Code/SheepJumper/node_modules/@babel/runtime/helpers/esm/createClass\";\n//@ts-nocheck\nimport Vector from \"../Vector/Vector\";\nimport Timer from \"../Timer/Timer\";\nimport EventManager from \"../EventManager/EventManager\";\n\nvar PhysicsEngine =\n/*#__PURE__*/\nfunction () {\n  _createClass(PhysicsEngine, null, [{\n    key: \"instance\",\n    get: function get() {\n      if (PhysicsEngine._instance === undefined) {\n        PhysicsEngine._instance = new PhysicsEngine();\n      }\n\n      return PhysicsEngine._instance;\n    }\n  }]);\n\n  function PhysicsEngine() {\n    var _this = this;\n\n    _classCallCheck(this, PhysicsEngine);\n\n    this.gravityVector = new Vector([0, 9.82]);\n\n    this.totalForce = function (gameObject) {\n      var totalForce = new Vector(_toConsumableArray(gameObject.force.vector));\n      totalForce = totalForce.plus(_this.dragForce(gameObject));\n      totalForce = totalForce.plus(_this.gravityForce(gameObject));\n      return totalForce;\n    };\n\n    this.rigidBodies = [];\n\n    this.add = function (body) {\n      _this.rigidBodies.push(body);\n    };\n\n    this.processRigidBodies = function (dt) {\n      _this.rigidBodies.forEach(function (element) {\n        _this.processRigidBody(element, dt);\n      });\n    };\n  }\n\n  _createClass(PhysicsEngine, [{\n    key: \"gravityForce\",\n    //gravity on object\n    value: function gravityForce(gameObject) {\n      return this.gravityVector.multiply(gameObject.weight).multiply(gameObject.gravity);\n    }\n  }, {\n    key: \"dragForce\",\n    value: function dragForce(gameObject) {\n      return new Vector([-Math.sign(gameObject.velocity.x) * Math.pow(gameObject.velocity.x, 2), -Math.sign(gameObject.velocity.y) * Math.pow(gameObject.velocity.y, 2)]).multiply(gameObject.drag);\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(body) {\n      this.rigidBodies.filterInPlace(body !== body);\n    }\n  }, {\n    key: \"processRigidBody\",\n    value: function processRigidBody(gameObject, deltaTime) {\n      var totalForce = this.totalForce(gameObject);\n      gameObject.acceleration = totalForce.divide(gameObject.weight);\n      gameObject.velocity = gameObject.velocity.plus(gameObject.acceleration.multiply(deltaTime / 1000));\n      gameObject.position = gameObject.position.plus(gameObject.velocity.multiply(deltaTime / 1000));\n    }\n  }, {\n    key: \"processEvent\",\n    value: function processEvent(event) {\n      var physics = event.physics,\n          end = event.end;\n      if (!physics) return;\n\n      if (!event.gameObject) {\n        throw \"PhysicsEngine: gameObject is undefined or null\";\n      }\n\n      if (!event.gameObject.rigidBody) {\n        throw \"PhysicsEngine: physics event fired withour rigidBody\";\n      }\n\n      var gameObject = event.gameObject.rigidBody;\n      if (!physics || !physics.force) return;\n      var duration = physics.duration;\n\n      if (end) {\n        gameObject.force = gameObject.force.minus(physics.force);\n      } else {\n        //@ts-ignore\n        gameObject.force = gameObject.force.plus(physics.force);\n\n        if (duration) {\n          Timer.instance.subscribeToTime(\n          /*#__PURE__*/\n          _asyncToGenerator(\n          /*#__PURE__*/\n          _regeneratorRuntime.mark(function _callee() {\n            return _regeneratorRuntime.wrap(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    EventManager.instance.registerEvent(_objectSpread({}, event, {\n                      end: true\n                    }));\n\n                  case 1:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _callee);\n          })), duration);\n        }\n      }\n    }\n  }]);\n\n  return PhysicsEngine;\n}();\n\nPhysicsEngine._instance = void 0;\nexport default PhysicsEngine;","map":{"version":3,"sources":["/Users/torkildjurhuus/Code/SheepJumper/src/PhysicsEngine/PhysicsEngine.ts"],"names":["Vector","Timer","EventManager","PhysicsEngine","_instance","undefined","gravityVector","totalForce","gameObject","force","vector","plus","dragForce","gravityForce","rigidBodies","add","body","push","processRigidBodies","dt","forEach","element","processRigidBody","multiply","weight","gravity","Math","sign","velocity","x","y","drag","filterInPlace","deltaTime","acceleration","divide","position","event","physics","end","rigidBody","duration","minus","instance","subscribeToTime","registerEvent"],"mappings":"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","sourcesContent":["//@ts-nocheck\nimport Vector from \"../Vector/Vector\";\nimport Event from \"../Events/Event\";\nimport Timer from \"../Timer/Timer\";\nimport EventManager from \"../EventManager/EventManager\";\nimport { createSocket } from \"dgram\";\n\nclass PhysicsEngine {\n  private static _instance: PhysicsEngine;\n  public static get instance() {\n    if (PhysicsEngine._instance === undefined) {\n      PhysicsEngine._instance = new PhysicsEngine();\n    }\n    return PhysicsEngine._instance;\n  }\n\n  private constructor() {}\n\n  private gravityVector = new Vector([0, 9.82]);\n\n  //gravity on object\n  private gravityForce(gameObject: any): Vector {\n    return this.gravityVector\n      .multiply(gameObject.weight)\n      .multiply(gameObject.gravity);\n  }\n\n  private dragForce(gameObject: any) {\n    return new Vector([\n      -Math.sign(gameObject.velocity.x) * gameObject.velocity.x ** 2,\n      -Math.sign(gameObject.velocity.y) * gameObject.velocity.y ** 2\n    ]).multiply(gameObject.drag);\n  }\n  private totalForce = (gameObject: any): Vector => {\n    let totalForce = new Vector([...gameObject.force.vector]);\n    totalForce = totalForce.plus(this.dragForce(gameObject));\n    totalForce = totalForce.plus(this.gravityForce(gameObject));\n    return totalForce;\n  };\n\n  private rigidBodies: any = [];\n  public add = (body: any) => {\n    this.rigidBodies.push(body);\n  };\n\n  public remove(body: any) {\n    this.rigidBodies.filterInPlace(body !== body);\n  }\n\n  public processRigidBodies = (dt: number) => {\n    this.rigidBodies.forEach((element: any) => {\n      this.processRigidBody(element, dt);\n    });\n  };\n\n  public processRigidBody(gameObject: any, deltaTime: number) {\n    const totalForce = this.totalForce(gameObject);\n    gameObject.acceleration = totalForce.divide(gameObject.weight);\n    gameObject.velocity = gameObject.velocity.plus(\n      gameObject.acceleration.multiply(deltaTime / 1000)\n    );\n\n    gameObject.position = gameObject.position.plus(\n      gameObject.velocity.multiply(deltaTime / 1000)\n    );\n  }\n\n  public processEvent(event: Event) {\n    const { physics, end } = event;\n    if (!physics) return;\n\n    if (!event.gameObject) {\n      throw \"PhysicsEngine: gameObject is undefined or null\";\n    }\n\n    if (!event.gameObject.rigidBody) {\n      throw \"PhysicsEngine: physics event fired withour rigidBody\";\n    }\n\n    const gameObject = event.gameObject.rigidBody;\n\n    if (!physics || !physics.force) return;\n    const { duration } = physics;\n\n    if (end) {\n      gameObject.force = gameObject.force.minus(physics.force);\n    } else {\n      //@ts-ignore\n      gameObject.force = gameObject.force.plus(physics.force);\n      if (duration) {\n        Timer.instance.subscribeToTime(async () => {\n          EventManager.instance.registerEvent({\n            ...event,\n            end: true\n          });\n        }, duration);\n      }\n    }\n  }\n}\n\nexport default PhysicsEngine;\n"]},"metadata":{},"sourceType":"module"}