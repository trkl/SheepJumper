{"ast":null,"code":"import _classCallCheck from \"/Users/torkildjurhuus/Code/SheepJumper/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/torkildjurhuus/Code/SheepJumper/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nvar Vector =\n/*#__PURE__*/\nfunction () {\n  function Vector() {\n    var _this = this;\n\n    var _vector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [0, 0];\n\n    _classCallCheck(this, Vector);\n\n    this.plus = function (_ref) {\n      var vector = _ref.vector;\n      return new Vector(_this.vector.map(function (val, idx) {\n        return val + vector[idx];\n      }));\n    };\n\n    this.minus = function (_ref2) {\n      var vector = _ref2.vector;\n      return new Vector(_this.vector.map(function (val, idx) {\n        return val - vector[idx];\n      }));\n    };\n\n    this.dot = function (_ref3) {\n      var vector = _ref3.vector;\n      return _this.vector.map(function (val, idx) {\n        return val * vector[idx];\n      }).reduce(function (prev, curr) {\n        return prev + curr;\n      }, 0);\n    };\n\n    this.multiply = function (scaler) {\n      return new Vector(_this.vector.map(function (val) {\n        return val * scaler;\n      }));\n    };\n\n    this.divide = function (scaler) {\n      return new Vector(_this.vector.map(function (val) {\n        return val / scaler;\n      }));\n    };\n\n    this.vector = _vector;\n  }\n\n  _createClass(Vector, [{\n    key: \"x\",\n    get: function get() {\n      return this.vector[0];\n    },\n    set: function set(val) {\n      this.vector[0] = val;\n    }\n  }, {\n    key: \"y\",\n    get: function get() {\n      return this.vector[1];\n    },\n    set: function set(val) {\n      this.vector[1] = val;\n    }\n  }], [{\n    key: \"Zero\",\n    get: function get() {\n      return new Vector();\n    }\n  }]);\n\n  return Vector;\n}();\n\nexport { Vector as default };","map":{"version":3,"sources":["/Users/torkildjurhuus/Code/SheepJumper/src/Vector/Vector.js"],"names":["Vector","vector","plus","map","val","idx","minus","dot","reduce","prev","curr","multiply","scaler","divide"],"mappings":";;;IAAqBA,M;;;AACnB,oBAA6B;AAAA;;AAAA,QAAjBC,OAAiB,uEAAR,CAAC,CAAD,EAAI,CAAJ,CAAQ;;AAAA;;AAAA,SAiB7BC,IAjB6B,GAiBtB;AAAA,UAAGD,MAAH,QAAGA,MAAH;AAAA,aACL,IAAID,MAAJ,CAAW,KAAI,CAACC,MAAL,CAAYE,GAAZ,CAAgB,UAACC,GAAD,EAAMC,GAAN;AAAA,eAAcD,GAAG,GAAGH,MAAM,CAACI,GAAD,CAA1B;AAAA,OAAhB,CAAX,CADK;AAAA,KAjBsB;;AAAA,SAoB7BC,KApB6B,GAoBrB;AAAA,UAAGL,MAAH,SAAGA,MAAH;AAAA,aACN,IAAID,MAAJ,CAAW,KAAI,CAACC,MAAL,CAAYE,GAAZ,CAAgB,UAACC,GAAD,EAAMC,GAAN;AAAA,eAAcD,GAAG,GAAGH,MAAM,CAACI,GAAD,CAA1B;AAAA,OAAhB,CAAX,CADM;AAAA,KApBqB;;AAAA,SAwB7BE,GAxB6B,GAwBvB;AAAA,UAAGN,MAAH,SAAGA,MAAH;AAAA,aACJ,KAAI,CAACA,MAAL,CACGE,GADH,CACO,UAACC,GAAD,EAAMC,GAAN;AAAA,eAAcD,GAAG,GAAGH,MAAM,CAACI,GAAD,CAA1B;AAAA,OADP,EAEGG,MAFH,CAEU,UAACC,IAAD,EAAOC,IAAP;AAAA,eAAgBD,IAAI,GAAGC,IAAvB;AAAA,OAFV,EAEuC,CAFvC,CADI;AAAA,KAxBuB;;AAAA,SA6B7BC,QA7B6B,GA6BlB,UAAAC,MAAM;AAAA,aAAI,IAAIZ,MAAJ,CAAW,KAAI,CAACC,MAAL,CAAYE,GAAZ,CAAgB,UAAAC,GAAG;AAAA,eAAIA,GAAG,GAAGQ,MAAV;AAAA,OAAnB,CAAX,CAAJ;AAAA,KA7BY;;AAAA,SA+B7BC,MA/B6B,GA+BpB,UAAAD,MAAM;AAAA,aAAI,IAAIZ,MAAJ,CAAW,KAAI,CAACC,MAAL,CAAYE,GAAZ,CAAgB,UAAAC,GAAG;AAAA,eAAIA,GAAG,GAAGQ,MAAV;AAAA,OAAnB,CAAX,CAAJ;AAAA,KA/Bc;;AAC3B,SAAKX,MAAL,GAAcA,OAAd;AACD;;;;wBAEO;AACN,aAAO,KAAKA,MAAL,CAAY,CAAZ,CAAP;AACD,K;sBAIKG,G,EAAK;AACT,WAAKH,MAAL,CAAY,CAAZ,IAAiBG,GAAjB;AACD;;;wBALO;AACN,aAAO,KAAKH,MAAL,CAAY,CAAZ,CAAP;AACD,K;sBAIKG,G,EAAK;AACT,WAAKH,MAAL,CAAY,CAAZ,IAAiBG,GAAjB;AACD;;;wBAkBiB;AAChB,aAAO,IAAIJ,MAAJ,EAAP;AACD;;;;;;SApCkBA,M","sourcesContent":["export default class Vector {\n  constructor(vector = [0, 0]) {\n    this.vector = vector;\n  }\n\n  get x() {\n    return this.vector[0];\n  }\n  get y() {\n    return this.vector[1];\n  }\n  set x(val) {\n    this.vector[0] = val;\n  }\n  set y(val) {\n    this.vector[1] = val;\n  }\n\n  plus = ({ vector }) =>\n    new Vector(this.vector.map((val, idx) => val + vector[idx]));\n\n  minus = ({ vector }) =>\n    new Vector(this.vector.map((val, idx) => val - vector[idx]));\n\n  // OBS!: returns number not vector\n  dot = ({ vector }) =>\n    this.vector\n      .map((val, idx) => val * vector[idx])\n      .reduce((prev, curr) => prev + curr, 0);\n\n  multiply = scaler => new Vector(this.vector.map(val => val * scaler));\n\n  divide = scaler => new Vector(this.vector.map(val => val / scaler));\n\n  static get Zero() {\n    return new Vector();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}