{"ast":null,"code":"import _classCallCheck from \"/Users/torkildjurhuus/Code/SheepJumper/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/torkildjurhuus/Code/SheepJumper/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport PhysicsEngine from \"../PhysicsEngine/PhysicsEngine\";\nimport CollisionManger from \"../CollisionManager/CollisionManager\";\nimport Timer from \"../Timer/Timer\";\nimport AudioManager from \"../AudioManager/AudioManager\";\n\nvar EventManager =\n/*#__PURE__*/\nfunction () {\n  _createClass(EventManager, null, [{\n    key: \"instance\",\n    get: function get() {\n      if (EventManager._instance === undefined) {\n        EventManager._instance = new EventManager();\n      }\n\n      return EventManager._instance;\n    } // // audioManager: AudioManager;\n\n  }]);\n\n  function EventManager() {\n    var _this = this;\n\n    _classCallCheck(this, EventManager);\n\n    this.eventQueue = [];\n    this.collisionManager = void 0;\n    this.audioManager = void 0;\n\n    this.registerEvent = function (event) {\n      _this.eventQueue.push(event);\n    };\n\n    this.handleTick = function (time) {\n      var eventQueue = _this.eventQueue;\n      var length = eventQueue.length;\n\n      for (var i = 0; i < length; ++i) {\n        var event = eventQueue[i];\n        PhysicsEngine.instance.processEvent(event);\n\n        if (!event.end) {\n          if (event.audio) {\n            _this.audioManager.playSound(event.audio.soundName);\n          }\n        }\n\n        var callback = event.callback;\n        if (callback) callback();\n      }\n\n      _this.eventQueue = [];\n    };\n\n    Timer.instance.subscribe(this.handleTick);\n    this.collisionManager = new CollisionManger(); // @ts-ignore\n\n    this.audioManager = new AudioManager();\n  }\n\n  return EventManager;\n}();\n\nEventManager._instance = void 0;\nexport { EventManager as default };","map":{"version":3,"sources":["/Users/torkildjurhuus/Code/SheepJumper/src/EventManager/EventManager.ts"],"names":["PhysicsEngine","CollisionManger","Timer","AudioManager","EventManager","_instance","undefined","eventQueue","collisionManager","audioManager","registerEvent","event","push","handleTick","time","length","i","instance","processEvent","end","audio","playSound","soundName","callback","subscribe"],"mappings":";;AAAA,OAAOA,aAAP,MAA0B,gCAA1B;AAEA,OAAOC,eAAP,MAA4B,sCAA5B;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,OAAOC,YAAP,MAAyB,8BAAzB;;IAEqBC,Y;;;;;wBAMU;AAC3B,UAAIA,YAAY,CAACC,SAAb,KAA2BC,SAA/B,EAA0C;AACxCF,QAAAA,YAAY,CAACC,SAAb,GAAyB,IAAID,YAAJ,EAAzB;AACD;;AACD,aAAOA,YAAY,CAACC,SAApB;AACD,K,CAED;;;;AAEA,0BAAsB;AAAA;;AAAA;;AAAA,SAdtBE,UAcsB,GAdA,EAcA;AAAA,SAbtBC,gBAasB;AAAA,SAZtBC,YAYsB;;AAAA,SAOfC,aAPe,GAOC,UAACC,KAAD,EAAkB;AACvC,MAAA,KAAI,CAACJ,UAAL,CAAgBK,IAAhB,CAAqBD,KAArB;AACD,KATqB;;AAAA,SAWtBE,UAXsB,GAWT,UAACC,IAAD,EAAkB;AAC7B,UAAMP,UAAU,GAAG,KAAI,CAACA,UAAxB;AAD6B,UAErBQ,MAFqB,GAEVR,UAFU,CAErBQ,MAFqB;;AAI7B,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,MAApB,EAA4B,EAAEC,CAA9B,EAAiC;AAC/B,YAAML,KAAK,GAAGJ,UAAU,CAACS,CAAD,CAAxB;AACAhB,QAAAA,aAAa,CAACiB,QAAd,CAAuBC,YAAvB,CAAoCP,KAApC;;AACA,YAAI,CAACA,KAAK,CAACQ,GAAX,EAAgB;AACd,cAAIR,KAAK,CAACS,KAAV,EAAiB;AACf,YAAA,KAAI,CAACX,YAAL,CAAkBY,SAAlB,CAA4BV,KAAK,CAACS,KAAN,CAAYE,SAAxC;AACD;AACF;;AAP8B,YAQvBC,QARuB,GAQVZ,KARU,CAQvBY,QARuB;AAS/B,YAAIA,QAAJ,EAAcA,QAAQ;AACvB;;AACD,MAAA,KAAI,CAAChB,UAAL,GAAkB,EAAlB;AACD,KA3BqB;;AACpBL,IAAAA,KAAK,CAACe,QAAN,CAAeO,SAAf,CAAyB,KAAKX,UAA9B;AACA,SAAKL,gBAAL,GAAwB,IAAIP,eAAJ,EAAxB,CAFoB,CAGpB;;AACA,SAAKQ,YAAL,GAAoB,IAAIN,YAAJ,EAApB;AACD;;;;;AApBkBC,Y,CAKJC,S;SALID,Y","sourcesContent":["import PhysicsEngine from \"../PhysicsEngine/PhysicsEngine\";\nimport Event from \"../Events/Event\";\nimport CollisionManger from \"../CollisionManager/CollisionManager\";\nimport Timer from \"../Timer/Timer\";\nimport AudioManager from \"../AudioManager/AudioManager\";\n\nexport default class EventManager {\n  eventQueue: Event[] = [];\n  collisionManager: CollisionManger;\n  audioManager: any;\n\n  private static _instance: EventManager;\n  public static get instance() {\n    if (EventManager._instance === undefined) {\n      EventManager._instance = new EventManager();\n    }\n    return EventManager._instance;\n  }\n\n  // // audioManager: AudioManager;\n\n  private constructor() {\n    Timer.instance.subscribe(this.handleTick);\n    this.collisionManager = new CollisionManger();\n    // @ts-ignore\n    this.audioManager = new AudioManager() as any;\n  }\n\n  public registerEvent = (event: Event) => {\n    this.eventQueue.push(event);\n  };\n\n  handleTick = (time: number) => {\n    const eventQueue = this.eventQueue;\n    const { length } = eventQueue;\n\n    for (let i = 0; i < length; ++i) {\n      const event = eventQueue[i];\n      PhysicsEngine.instance.processEvent(event);\n      if (!event.end) {\n        if (event.audio) {\n          this.audioManager.playSound(event.audio.soundName);\n        }\n      }\n      const { callback } = event;\n      if (callback) callback();\n    }\n    this.eventQueue = [];\n  };\n}\n"]},"metadata":{},"sourceType":"module"}