"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Builder = void 0;

var _lodash = _interopRequireDefault(require("lodash"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Builder =
/*#__PURE__*/
function () {
  function Builder(builder) {
    _classCallCheck(this, Builder);

    this.builder = builder;
    this.usingWrappers = [];
    this.injectValues = [];
    this.withProperties = [];
  }

  _createClass(Builder, [{
    key: "with",
    value: function _with(properties) {
      this.withProperties.push(properties);
      return this;
    }
  }, {
    key: "using",
    value: function using(wrapper, preWrapper) {
      this.usingWrappers.push({
        wrapper: wrapper,
        preWrapper: preWrapper ? preWrapper : null
      });
      return this;
    }
  }, {
    key: "inject",
    value: function inject(values) {
      var clone = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      this.injectValues.push(clone ? _lodash.default.cloneDeep(values) : values);
      return this;
    }
  }, {
    key: "override",
    value: function override(key, values) {
      var index = _lodash.default.findIndex(this.injectValues, function (o) {
        return o.key == key;
      });

      if (index === -1) return this;
      this.injectValues[index] = _lodash.default.assign(this.injectValues[index], values);
      return this;
    }
  }, {
    key: "create",
    value: function create() {
      var properties = {};
      properties = _lodash.default.reduce(this.withProperties, function (result, value) {
        return _lodash.default.assign({}, result, _lodash.default.isFunction(value) ? value() : value);
      }, properties);

      _lodash.default.forEach(this.usingWrappers, function (_ref) {
        var preWrapper = _ref.preWrapper;

        if (preWrapper) {
          preWrapper();
        }
      });

      var builder = this.builder(properties);
      builder = _lodash.default.reduce(this.injectValues, function (result, value) {
        return result(value);
      }, builder);

      while (_lodash.default.isFunction(builder)) {
        builder = builder();
      }

      var result = builder;
      result = _lodash.default.reduce(this.usingWrappers, function (accumelatedResult, _ref2) {
        var wrapper = _ref2.wrapper;
        return wrapper(accumelatedResult);
      }, result);
      return result;
    }
  }]);

  return Builder;
}();

exports.Builder = Builder;

var constructBuilder = function constructBuilder(builder) {
  return new Builder(builder);
};

var _default = constructBuilder;
exports.default = _default;